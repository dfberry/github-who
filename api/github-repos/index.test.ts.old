import httpTrigger from './index'
import fetch from 'cross-fetch';
const { Response } = jest.requireActual('cross-fetch')

import {
  runStubFunctionFromBindings,
  createHttpTrigger,
} from 'stub-azure-function-context'

jest.mock('cross-fetch')

describe('GitHub User repos', () => {
  it('fails on missing token', async () => {
      
    const res = await mockedRequestFactory('')

    expect(res.statusCode).toEqual(400)

    const body = JSON.parse(res.body)
    expect(body.code).toEqual('authenticationFailed')

    const mock = (fetch as unknown) as jest.Mock
    expect(mock).toHaveBeenCalledTimes(0)
  })

  it('returns repo list', async () => {
    
    const personalAccessToken:string = process.env.GITHUB_TEST_PERSON_ACCESS_TOKEN;
    const expectedResponse = {};

    const mock = (fetch as unknown) as jest.Mock
    mock.mockResolvedValue(new Response(JSON.stringify(expectedResponse)))

    const res = await mockedRequestFactory(personalAccessToken)

    expect(res.statusCode).toEqual(200)

    const body = JSON.parse(res.body)
    expect(body).toEqual(expectedResponse)

    expect(mock).toHaveBeenCalledTimes(1)
    expect(mock).toHaveBeenCalledWith(`https://github.com/user/repos`)
  })
})

async function mockedRequestFactory(token: string) {
  return runStubFunctionFromBindings(
      /*
      // https://github.com/willmorgan/stub-azure-function-context/blob/develop/lib/bindings/http.js
      method = 'GET', 
      url = 'http://example.com/', 
      headers = {}, 
      params = {}, 
      body, 
      query = {}, 
      originalUrl, 
      rawBody
      */
    httpTrigger,
    [
      {
        type: 'httpTrigger',
        name: 'req',
        direction: 'in',
        data: createHttpTrigger(
          'GET',
          'http://example.com',
          { Authorization: `token ${token}` }, // headers
          {}, //params
          undefined, // body
          {  }, // query string
          // original url (missing b/c unncessary),
          // rawbody (missing b/c unnecessary)
        ),
      },
      { type: 'http', name: '$return', direction: 'out' },
    ],
    new Date(),
  )
}
